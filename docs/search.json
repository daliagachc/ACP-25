[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "",
    "text": "imports\n# here i am importing probably more than what we need.\n# #region imports\nfrom IPython import get_ipython\n\n# noinspection PyBroadException\ntry:\n    _magic = get_ipython().run_line_magic\n    _magic(\"load_ext\", \"autoreload\")\n    _magic(\"autoreload\", \"2\")\nexcept:\n    pass\n\n\n# noinspection PyUnresolvedReferences\nimport glob\n# noinspection PyUnresolvedReferences\nimport os\n# noinspection PyUnresolvedReferences\nimport pprint\n# noinspection PyUnresolvedReferences\nimport sys\n# noinspection PyUnresolvedReferences\nimport matplotlib as mpl\n# noinspection PyUnresolvedReferences\nimport matplotlib.colors\n# noinspection PyUnresolvedReferences\nimport matplotlib.pyplot as plt\n# noinspection PyUnresolvedReferences\nimport numpy as np\n# noinspection PyUnresolvedReferences\nimport pandas as pd\n# noinspection PyUnresolvedReferences\nimport seaborn as sns\n# noinspection PyUnresolvedReferences\nimport xarray as xr\n# noinspection PyUnresolvedReferences\n#import bnn_tools.bnn_array\n\nplt.style.use('default')\nxr.set_options(\n    display_expand_data = False,\n    display_expand_data_vars = True,\n    display_max_rows = 10,\n    display_style = 'html',\n    display_width = 80,\n    display_expand_attrs = False\n);\n#endregion"
  },
  {
    "objectID": "index.html#xarray-intro",
    "href": "index.html#xarray-intro",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "xarray intro",
    "text": "xarray intro\nThis notebook provides a brief introduction to using xarray with particle number size distributions, specifically how to open and plot the files provided for the exercise.\nDisclaimer: I used ChatGPT to comment the code. I reviewed all comments to ensure they are informative and convey the intended meaning. When necessary, I modified them to accurately reflect the correct information.\nFurthermore, I generally code using the “method chaining” paradigm, which makes code much more readable in both Pandas and Xarray (in my opinion). You can read more about it here."
  },
  {
    "objectID": "index.html#open-datasets",
    "href": "index.html#open-datasets",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Open datasets",
    "text": "Open datasets\n\n\nCode\n# Define the absolute path to your data directory.\n# Set it to an empty string ('') if your data is in the same folder as the script.\ndata_dir = ('/Users/aliaga/Documents/Work_DA/PostDocSU/'\n            'ACP-teaching/ACP-data-exploration/'\n            'ACP_25_project/data/')\n\n# Construct full paths to the dataset files\np1 = data_dir + 'hourly_data_chc_alto_acp.nc'\n# Path to hourly data\n\np2 = data_dir + 'particle_number_size_dist_ACP.nc'\n# Path to particle number size distribution data\n\n# Open the datasets using xarray\nds1 = xr.open_dataset(p1)  # Load the first dataset\nds2 = xr.open_dataset(p2)  # Load the second dataset"
  },
  {
    "objectID": "index.html#select-id",
    "href": "index.html#select-id",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Select id",
    "text": "Select id\nThe PNSD file contains several IDs, each representing a different way of combining data from the NAIS and SMPS instruments. For this exercise, we will focus only on the ‘10xnais_ion_neutral_smps’ ID. This ID means:\n\nNAIS naturrally charged particles between 2-4nm x10\n\nnotice the multiplication by 10. This is because charged particle are in general and by definition less abundant than neutral particles\n\nNAIS neutral particles between 4–15 nm\nSMPS measures particles between 15–440 nm\n\n\n\nCode\n#print all available ids\nds2.id.to_series().reset_index(drop=True)\n\n\n0                      ion_neg\n1                      ion_pos\n2    nais_ion_neg_neutral_smps\n3        nais_ion_neutral_smps\n4            nais_neutral_smps\n5                  neutral_neg\n6                  neutral_pos\n7                         smps\n8     10xnais_ion_neutral_smps\nName: id, dtype: object\n\n\nFor counting the total number of particles, always use nais_neutral_smps to avoid altering the particle count by multiplying by 10 or using a specific range.\nSummary:\n\nUse 10xnais_ion_neutral_smps for plotting\nUse nais_neutral_smps for calculations\n\n\n\nCode\nds2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 91MB\nDimensions:  (loc: 2, id: 9, Dp: 59, time: 10656)\nCoordinates:\n  * loc      (loc) &lt;U4 32B 'alto' 'chc'\n  * id       (id) &lt;U25 900B 'ion_neg' 'ion_pos' ... '10xnais_ion_neutral_smps'\n  * Dp       (Dp) float64 472B 7.943e-10 8.913e-10 1e-09 ... 5.623e-07 6.31e-07\n  * time     (time) datetime64[ns] 85kB 2018-03-19 ... 2018-05-31T23:50:00\n    hr_t     (time) timedelta64[ns] 85kB ...\n    hour     (time) float64 85kB ...\nData variables:\n    dndlDp   (id, loc, Dp, time) float64 91MB ...xarray.DatasetDimensions:loc: 2id: 9Dp: 59time: 10656Coordinates: (6)loc(loc)&lt;U4'alto' 'chc'array(['alto', 'chc'], dtype='&lt;U4')id(id)&lt;U25'ion_neg' ... '10xnais_ion_neutr...array(['ion_neg', 'ion_pos', 'nais_ion_neg_neutral_smps',\n       'nais_ion_neutral_smps', 'nais_neutral_smps', 'neutral_neg',\n       'neutral_pos', 'smps', '10xnais_ion_neutral_smps'], dtype='&lt;U25')Dp(Dp)float647.943e-10 8.913e-10 ... 6.31e-07description :madian bin diameterunits :mlong_name :particle diameterarray([7.943282e-10, 8.912509e-10, 1.000000e-09, 1.122018e-09, 1.258925e-09,\n       1.412538e-09, 1.584893e-09, 1.778279e-09, 1.995262e-09, 2.238721e-09,\n       2.511886e-09, 2.818383e-09, 3.162278e-09, 3.548134e-09, 3.981072e-09,\n       4.466836e-09, 5.011872e-09, 5.623413e-09, 6.309573e-09, 7.079458e-09,\n       7.943282e-09, 8.912509e-09, 1.000000e-08, 1.122018e-08, 1.258925e-08,\n       1.412538e-08, 1.584893e-08, 1.778279e-08, 1.995262e-08, 2.238721e-08,\n       2.511886e-08, 2.818383e-08, 3.162278e-08, 3.548134e-08, 3.981072e-08,\n       4.466836e-08, 5.011872e-08, 5.623413e-08, 6.309573e-08, 7.079458e-08,\n       7.943282e-08, 8.912509e-08, 1.000000e-07, 1.122018e-07, 1.258925e-07,\n       1.412538e-07, 1.584893e-07, 1.778279e-07, 1.995262e-07, 2.238721e-07,\n       2.511886e-07, 2.818383e-07, 3.162278e-07, 3.548134e-07, 3.981072e-07,\n       4.466836e-07, 5.011872e-07, 5.623413e-07, 6.309573e-07])time(time)datetime64[ns]2018-03-19 ... 2018-05-31T23:50:00description :local time (UTC-4)array(['2018-03-19T00:00:00.000000000', '2018-03-19T00:10:00.000000000',\n       '2018-03-19T00:20:00.000000000', ..., '2018-05-31T23:30:00.000000000',\n       '2018-05-31T23:40:00.000000000', '2018-05-31T23:50:00.000000000'],\n      dtype='datetime64[ns]')hr_t(time)timedelta64[ns]...[10656 values with dtype=timedelta64[ns]]hour(time)float64...[10656 values with dtype=float64]Data variables: (1)dndlDp(id, loc, Dp, time)float64...description :delta N / delta log(Dp)units :cm^-3long_name :delta N / delta log(Dp)[11316672 values with dtype=float64]Indexes: (4)locPandasIndexPandasIndex(Index(['alto', 'chc'], dtype='object', name='loc'))idPandasIndexPandasIndex(Index(['ion_neg', 'ion_pos', 'nais_ion_neg_neutral_smps',\n       'nais_ion_neutral_smps', 'nais_neutral_smps', 'neutral_neg',\n       'neutral_pos', 'smps', '10xnais_ion_neutral_smps'],\n      dtype='object', name='id'))DpPandasIndexPandasIndex(Float64Index([ 7.943282347242822e-10,  8.912509381337441e-10,\n                               1e-09, 1.1220184543019608e-09,\n              1.2589254117941663e-09, 1.4125375446227555e-09,\n               1.584893192461111e-09, 1.7782794100389228e-09,\n              1.9952623149688745e-09, 2.2387211385683377e-09,\n               2.511886431509582e-09, 2.8183829312644493e-09,\n              3.1622776601683795e-09,  3.548133892335746e-09,\n               3.981071705534969e-09,  4.466835921509635e-09,\n               5.011872336272715e-09,  5.623413251903491e-09,\n               6.309573444801917e-09, 7.0794578438413736e-09,\n               7.943282347242822e-09,  8.912509381337441e-09,\n                               1e-08,  1.122018454301963e-08,\n              1.2589254117941661e-08, 1.4125375446227526e-08,\n               1.584893192461111e-08, 1.7782794100389228e-08,\n              1.9952623149688786e-08, 2.2387211385683378e-08,\n               2.511886431509577e-08,  2.818382931264449e-08,\n               3.162277660168379e-08,  3.548133892335753e-08,\n               3.981071705534969e-08,  4.466835921509626e-08,\n              5.0118723362727144e-08, 5.6234132519034905e-08,\n                6.30957344480193e-08,  7.079457843841373e-08,\n               7.943282347242805e-08,   8.91250938133744e-08,\n                               1e-07,  1.122018454301963e-07,\n              1.2589254117941662e-07, 1.4125375446227526e-07,\n               1.584893192461111e-07, 1.7782794100389227e-07,\n              1.9952623149688787e-07, 2.2387211385683377e-07,\n               2.511886431509577e-07,  2.818382931264449e-07,\n               3.162277660168379e-07,  3.548133892335753e-07,\n               3.981071705534969e-07,  4.466835921509626e-07,\n               5.011872336272714e-07,   5.62341325190349e-07,\n                6.30957344480193e-07],\n             dtype='float64', name='Dp'))timePandasIndexPandasIndex(DatetimeIndex(['2018-03-19 00:00:00', '2018-03-19 00:10:00',\n               '2018-03-19 00:20:00', '2018-03-19 00:30:00',\n               '2018-03-19 00:40:00', '2018-03-19 00:50:00',\n               '2018-03-19 01:00:00', '2018-03-19 01:10:00',\n               '2018-03-19 01:20:00', '2018-03-19 01:30:00',\n               ...\n               '2018-05-31 22:20:00', '2018-05-31 22:30:00',\n               '2018-05-31 22:40:00', '2018-05-31 22:50:00',\n               '2018-05-31 23:00:00', '2018-05-31 23:10:00',\n               '2018-05-31 23:20:00', '2018-05-31 23:30:00',\n               '2018-05-31 23:40:00', '2018-05-31 23:50:00'],\n              dtype='datetime64[ns]', name='time', length=10656, freq=None))Attributes: (0)\n\n\n\n\nCode\n# Select data from ds2 for the specified ID\nId = '10xnais_ion_neutral_smps'\n\nselected_data = (\n    ds2\n    .loc[{'id': Id}]  # Filter dataset by the given ID\n)\n\n# Display the selected data\nselected_data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 10MB\nDimensions:  (loc: 2, Dp: 59, time: 10656)\nCoordinates:\n  * loc      (loc) &lt;U4 32B 'alto' 'chc'\n    id       &lt;U25 100B 'nais_neutral_smps'\n  * Dp       (Dp) float64 472B 7.943e-10 8.913e-10 1e-09 ... 5.623e-07 6.31e-07\n  * time     (time) datetime64[ns] 85kB 2018-03-19 ... 2018-05-31T23:50:00\n    hr_t     (time) timedelta64[ns] 85kB ...\n    hour     (time) float64 85kB ...\nData variables:\n    dndlDp   (loc, Dp, time) float64 10MB ...xarray.DatasetDimensions:loc: 2Dp: 59time: 10656Coordinates: (6)loc(loc)&lt;U4'alto' 'chc'array(['alto', 'chc'], dtype='&lt;U4')id()&lt;U25'nais_neutral_smps'array('nais_neutral_smps', dtype='&lt;U25')Dp(Dp)float647.943e-10 8.913e-10 ... 6.31e-07description :madian bin diameterunits :mlong_name :particle diameterarray([7.943282e-10, 8.912509e-10, 1.000000e-09, 1.122018e-09, 1.258925e-09,\n       1.412538e-09, 1.584893e-09, 1.778279e-09, 1.995262e-09, 2.238721e-09,\n       2.511886e-09, 2.818383e-09, 3.162278e-09, 3.548134e-09, 3.981072e-09,\n       4.466836e-09, 5.011872e-09, 5.623413e-09, 6.309573e-09, 7.079458e-09,\n       7.943282e-09, 8.912509e-09, 1.000000e-08, 1.122018e-08, 1.258925e-08,\n       1.412538e-08, 1.584893e-08, 1.778279e-08, 1.995262e-08, 2.238721e-08,\n       2.511886e-08, 2.818383e-08, 3.162278e-08, 3.548134e-08, 3.981072e-08,\n       4.466836e-08, 5.011872e-08, 5.623413e-08, 6.309573e-08, 7.079458e-08,\n       7.943282e-08, 8.912509e-08, 1.000000e-07, 1.122018e-07, 1.258925e-07,\n       1.412538e-07, 1.584893e-07, 1.778279e-07, 1.995262e-07, 2.238721e-07,\n       2.511886e-07, 2.818383e-07, 3.162278e-07, 3.548134e-07, 3.981072e-07,\n       4.466836e-07, 5.011872e-07, 5.623413e-07, 6.309573e-07])time(time)datetime64[ns]2018-03-19 ... 2018-05-31T23:50:00description :local time (UTC-4)array(['2018-03-19T00:00:00.000000000', '2018-03-19T00:10:00.000000000',\n       '2018-03-19T00:20:00.000000000', ..., '2018-05-31T23:30:00.000000000',\n       '2018-05-31T23:40:00.000000000', '2018-05-31T23:50:00.000000000'],\n      dtype='datetime64[ns]')hr_t(time)timedelta64[ns]...[10656 values with dtype=timedelta64[ns]]hour(time)float64...[10656 values with dtype=float64]Data variables: (1)dndlDp(loc, Dp, time)float64...description :delta N / delta log(Dp)units :cm^-3long_name :delta N / delta log(Dp)[1257408 values with dtype=float64]Indexes: (3)locPandasIndexPandasIndex(Index(['alto', 'chc'], dtype='object', name='loc'))DpPandasIndexPandasIndex(Float64Index([ 7.943282347242822e-10,  8.912509381337441e-10,\n                               1e-09, 1.1220184543019608e-09,\n              1.2589254117941663e-09, 1.4125375446227555e-09,\n               1.584893192461111e-09, 1.7782794100389228e-09,\n              1.9952623149688745e-09, 2.2387211385683377e-09,\n               2.511886431509582e-09, 2.8183829312644493e-09,\n              3.1622776601683795e-09,  3.548133892335746e-09,\n               3.981071705534969e-09,  4.466835921509635e-09,\n               5.011872336272715e-09,  5.623413251903491e-09,\n               6.309573444801917e-09, 7.0794578438413736e-09,\n               7.943282347242822e-09,  8.912509381337441e-09,\n                               1e-08,  1.122018454301963e-08,\n              1.2589254117941661e-08, 1.4125375446227526e-08,\n               1.584893192461111e-08, 1.7782794100389228e-08,\n              1.9952623149688786e-08, 2.2387211385683378e-08,\n               2.511886431509577e-08,  2.818382931264449e-08,\n               3.162277660168379e-08,  3.548133892335753e-08,\n               3.981071705534969e-08,  4.466835921509626e-08,\n              5.0118723362727144e-08, 5.6234132519034905e-08,\n                6.30957344480193e-08,  7.079457843841373e-08,\n               7.943282347242805e-08,   8.91250938133744e-08,\n                               1e-07,  1.122018454301963e-07,\n              1.2589254117941662e-07, 1.4125375446227526e-07,\n               1.584893192461111e-07, 1.7782794100389227e-07,\n              1.9952623149688787e-07, 2.2387211385683377e-07,\n               2.511886431509577e-07,  2.818382931264449e-07,\n               3.162277660168379e-07,  3.548133892335753e-07,\n               3.981071705534969e-07,  4.466835921509626e-07,\n               5.011872336272714e-07,   5.62341325190349e-07,\n                6.30957344480193e-07],\n             dtype='float64', name='Dp'))timePandasIndexPandasIndex(DatetimeIndex(['2018-03-19 00:00:00', '2018-03-19 00:10:00',\n               '2018-03-19 00:20:00', '2018-03-19 00:30:00',\n               '2018-03-19 00:40:00', '2018-03-19 00:50:00',\n               '2018-03-19 01:00:00', '2018-03-19 01:10:00',\n               '2018-03-19 01:20:00', '2018-03-19 01:30:00',\n               ...\n               '2018-05-31 22:20:00', '2018-05-31 22:30:00',\n               '2018-05-31 22:40:00', '2018-05-31 22:50:00',\n               '2018-05-31 23:00:00', '2018-05-31 23:10:00',\n               '2018-05-31 23:20:00', '2018-05-31 23:30:00',\n               '2018-05-31 23:40:00', '2018-05-31 23:50:00'],\n              dtype='datetime64[ns]', name='time', length=10656, freq=None))Attributes: (0)\n\n\nWe are also only using 1 variable (dndlDp) in this dataset. So it is better to call the variable which collapses the dataset into a dataarray:\n\n\nCode\n# Define the ID and variable to select\nId = '10xnais_ion_neutral_smps'\nVar = 'dndlDp'\n\n# Select the specified variable from the dataset filtered by ID\nselected_var = (\n    ds2\n    .loc[{'id': Id}]  # Filter dataset by the given ID\n    [Var]  # Select the variable\n)\n\n# Display the selected variable\nselected_var\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'dndlDp' (loc: 2, Dp: 59, time: 10656)&gt; Size: 10MB\n[1257408 values with dtype=float64]\nCoordinates:\n  * loc      (loc) &lt;U4 32B 'alto' 'chc'\n    id       &lt;U25 100B 'nais_neutral_smps'\n  * Dp       (Dp) float64 472B 7.943e-10 8.913e-10 1e-09 ... 5.623e-07 6.31e-07\n  * time     (time) datetime64[ns] 85kB 2018-03-19 ... 2018-05-31T23:50:00\n    hr_t     (time) timedelta64[ns] 85kB ...\n    hour     (time) float64 85kB ...\nAttributes: (3)xarray.DataArray'dndlDp'loc: 2Dp: 59time: 10656...[1257408 values with dtype=float64]Coordinates: (6)loc(loc)&lt;U4'alto' 'chc'array(['alto', 'chc'], dtype='&lt;U4')id()&lt;U25'nais_neutral_smps'array('nais_neutral_smps', dtype='&lt;U25')Dp(Dp)float647.943e-10 8.913e-10 ... 6.31e-07description :madian bin diameterunits :mlong_name :particle diameterarray([7.943282e-10, 8.912509e-10, 1.000000e-09, 1.122018e-09, 1.258925e-09,\n       1.412538e-09, 1.584893e-09, 1.778279e-09, 1.995262e-09, 2.238721e-09,\n       2.511886e-09, 2.818383e-09, 3.162278e-09, 3.548134e-09, 3.981072e-09,\n       4.466836e-09, 5.011872e-09, 5.623413e-09, 6.309573e-09, 7.079458e-09,\n       7.943282e-09, 8.912509e-09, 1.000000e-08, 1.122018e-08, 1.258925e-08,\n       1.412538e-08, 1.584893e-08, 1.778279e-08, 1.995262e-08, 2.238721e-08,\n       2.511886e-08, 2.818383e-08, 3.162278e-08, 3.548134e-08, 3.981072e-08,\n       4.466836e-08, 5.011872e-08, 5.623413e-08, 6.309573e-08, 7.079458e-08,\n       7.943282e-08, 8.912509e-08, 1.000000e-07, 1.122018e-07, 1.258925e-07,\n       1.412538e-07, 1.584893e-07, 1.778279e-07, 1.995262e-07, 2.238721e-07,\n       2.511886e-07, 2.818383e-07, 3.162278e-07, 3.548134e-07, 3.981072e-07,\n       4.466836e-07, 5.011872e-07, 5.623413e-07, 6.309573e-07])time(time)datetime64[ns]2018-03-19 ... 2018-05-31T23:50:00description :local time (UTC-4)array(['2018-03-19T00:00:00.000000000', '2018-03-19T00:10:00.000000000',\n       '2018-03-19T00:20:00.000000000', ..., '2018-05-31T23:30:00.000000000',\n       '2018-05-31T23:40:00.000000000', '2018-05-31T23:50:00.000000000'],\n      dtype='datetime64[ns]')hr_t(time)timedelta64[ns]...[10656 values with dtype=timedelta64[ns]]hour(time)float64...[10656 values with dtype=float64]Indexes: (3)locPandasIndexPandasIndex(Index(['alto', 'chc'], dtype='object', name='loc'))DpPandasIndexPandasIndex(Float64Index([ 7.943282347242822e-10,  8.912509381337441e-10,\n                               1e-09, 1.1220184543019608e-09,\n              1.2589254117941663e-09, 1.4125375446227555e-09,\n               1.584893192461111e-09, 1.7782794100389228e-09,\n              1.9952623149688745e-09, 2.2387211385683377e-09,\n               2.511886431509582e-09, 2.8183829312644493e-09,\n              3.1622776601683795e-09,  3.548133892335746e-09,\n               3.981071705534969e-09,  4.466835921509635e-09,\n               5.011872336272715e-09,  5.623413251903491e-09,\n               6.309573444801917e-09, 7.0794578438413736e-09,\n               7.943282347242822e-09,  8.912509381337441e-09,\n                               1e-08,  1.122018454301963e-08,\n              1.2589254117941661e-08, 1.4125375446227526e-08,\n               1.584893192461111e-08, 1.7782794100389228e-08,\n              1.9952623149688786e-08, 2.2387211385683378e-08,\n               2.511886431509577e-08,  2.818382931264449e-08,\n               3.162277660168379e-08,  3.548133892335753e-08,\n               3.981071705534969e-08,  4.466835921509626e-08,\n              5.0118723362727144e-08, 5.6234132519034905e-08,\n                6.30957344480193e-08,  7.079457843841373e-08,\n               7.943282347242805e-08,   8.91250938133744e-08,\n                               1e-07,  1.122018454301963e-07,\n              1.2589254117941662e-07, 1.4125375446227526e-07,\n               1.584893192461111e-07, 1.7782794100389227e-07,\n              1.9952623149688787e-07, 2.2387211385683377e-07,\n               2.511886431509577e-07,  2.818382931264449e-07,\n               3.162277660168379e-07,  3.548133892335753e-07,\n               3.981071705534969e-07,  4.466835921509626e-07,\n               5.011872336272714e-07,   5.62341325190349e-07,\n                6.30957344480193e-07],\n             dtype='float64', name='Dp'))timePandasIndexPandasIndex(DatetimeIndex(['2018-03-19 00:00:00', '2018-03-19 00:10:00',\n               '2018-03-19 00:20:00', '2018-03-19 00:30:00',\n               '2018-03-19 00:40:00', '2018-03-19 00:50:00',\n               '2018-03-19 01:00:00', '2018-03-19 01:10:00',\n               '2018-03-19 01:20:00', '2018-03-19 01:30:00',\n               ...\n               '2018-05-31 22:20:00', '2018-05-31 22:30:00',\n               '2018-05-31 22:40:00', '2018-05-31 22:50:00',\n               '2018-05-31 23:00:00', '2018-05-31 23:10:00',\n               '2018-05-31 23:20:00', '2018-05-31 23:30:00',\n               '2018-05-31 23:40:00', '2018-05-31 23:50:00'],\n              dtype='datetime64[ns]', name='time', length=10656, freq=None))Attributes: (3)description :delta N / delta log(Dp)units :cm^-3long_name :delta N / delta log(Dp)"
  },
  {
    "objectID": "index.html#plot-a-particle-number-size-distribution",
    "href": "index.html#plot-a-particle-number-size-distribution",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Plot a particle number size distribution",
    "text": "Plot a particle number size distribution\nPlotting a PNSD is not entirely intuitive. You can use the matplotlib framework directly, but xarray sometimes makes it easier.\nExample: Try commenting out some lines to see their effect.\n\n\nCode\n# Define selection parameters\nId = '10xnais_ion_neutral_smps'  # Instrument ID\nVar = 'dndlDp'  # Variable to plot\nLoc = 'chc'  # Location\n\n# Select and plot the data\n(\n    ds2\n    .loc[{'id': Id}]  # Filter by instrument ID\n    .loc[{'loc': Loc}]  # Filter by location\n    [Var]  # Select the variable\n    .plot(\n        x='time',  # Set x-axis to time\n        y='Dp',  # Set y-axis to particle diameter\n        norm=mpl.colors.LogNorm(vmin=1e2, vmax=1e6),\n        # Logarithmic color scale normalization\n        cmap='viridis',  # Use the Viridis colormap\n        yscale='log',  # Logarithmic y-axis scale\n        size=2,  # Adjust figure size\n        aspect=3  # Adjust aspect ratio\n    )\n)\n\n\n\n\n\n\n\n\nFigure 1: Particle number size distribution timeseries over CHC\n\n\n\n\n\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier (currently not used)\n\n(\n    ds2\n    .loc[{'id': Id}]  # Select data based on the given ID\n    [Var]  # Extract the variable of interest\n    .rename({'Dp':'Dp [m]'}) # rename for the ylabel\n    .plot(\n        x='time',  # Set x-axis as time\n        y='Dp [m]',  # Set y-axis as particle diameter\n        norm=mpl.colors.LogNorm(vmin=1e2, vmax=1e6),\n        # Apply logarithmic normalization for color scale\n        cmap='viridis',\n        # Use the 'viridis' colormap for better visibility\n        yscale='log',  # Set y-axis to logarithmic scale\n        size=2,  # Adjust panel height for better readability\n        aspect=3,  # Set aspect ratio for better visualization\n        row='loc'  # Create separate plots for each location\n    )\n);\n\n\n\n\n\n\n\n\nFigure 2: Particle number size distribution timeseries over CHC and EAC."
  },
  {
    "objectID": "index.html#median-mean-over-time",
    "href": "index.html#median-mean-over-time",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Median / mean over time",
    "text": "Median / mean over time\nHere, we calculate and plot the overall median (Figure 3, Figure 4) and mean (Figure 5) PNSD. First, we analyze CHC alone, followed by a combined analysis of CHC and EAC.\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier\n\n(\n    ds2\n    .loc[{'id': Id}]   # Select data based on the given ID\n    .loc[{'loc': Loc}]  # Filter data for the specified location\n    [Var]               # Extract the variable of interest\n    .median('time')     # Compute the median over the time dimension\n    .rename(Var + ' [cm^-3]') # rename for ylable\n    .reset_coords(drop=True) # so that the title is not messy\n    .plot(              # Plot the data\n        yscale='log',   # Set y-axis to logarithmic scale\n        xscale='log'    # Set x-axis to logarithmic scale\n    )\n)\n\nf:plt.Figure = plt.gcf()\n_s = 2;f.set_size_inches(_s,_s/1.6)\n\n\n\n\n\n\n\n\nFigure 3: Median particle size distribution over CHC\n\n\n\n\n\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier (currently not used)\n\n(\n    ds2\n    .loc[{'id': Id}]   # Select data based on the given ID\n    # .loc[{'loc': Loc}]  # Location filtering is commented out\n    [Var]               # Extract the variable of interest\n    .median('time')     # Compute the median over the time dimension\n    .rename(Var + ' [cm^-3]') # rename for ylable\n    .reset_coords(drop=True) # so that the title is not messy\n    .plot(              # Plot the data\n        yscale='log',   # Set y-axis to logarithmic scale\n        xscale='log',   # Set x-axis to logarithmic scale\n        hue='loc'       # Differentiate locations using color\n    )\n);\nax:plt.Axes = plt.gca()\n\nax.get_legend().set_bbox_to_anchor([1,1])\n\nf:plt.Figure = plt.gcf()\n_s = 2;f.set_size_inches(_s,_s/1.6)\n\n\n\n\n\n\n\n\nFigure 4: Median over time.\n\n\n\n\n\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier (currently not used)\n\n(\n    ds2\n    .loc[{'id': Id}]   # Select data based on the given ID\n        # .loc[{'loc': Loc}]  # Location filtering is commented out\n    [Var]               # Extract the variable of interest\n    .mean('time')     # Compute the mean over the time dimension\n    .reset_coords(drop=True) # so that the title is not messy\n    .plot(              # Plot the data\n        yscale='log',   # Set y-axis to logarithmic scale\n        xscale='log',   # Set x-axis to logarithmic scale\n        hue='loc'       # Differentiate locations using color\n    )\n);\nax:plt.Axes = plt.gca()\nax.get_legend().set_bbox_to_anchor([1,1])\nf:plt.Figure = plt.gcf()\n_s = 2;f.set_size_inches(_s,_s/1.6)\n\n\n\n\n\n\n\n\nFigure 5: Mean over time."
  },
  {
    "objectID": "index.html#median-mean-at-specific-time",
    "href": "index.html#median-mean-at-specific-time",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Median /mean at specific time",
    "text": "Median /mean at specific time\nWe can also take the median at specific times during the day. For example at 5AM (before sunrise) and noon(peak irradiance) which are shown in Figure 6.\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier (currently not used)\n\n(\n    ds2\n    .loc[{'id': Id}]   # Select data based on the given ID\n    [Var]               # Extract the variable of interest\n\n    # Create an 'hour' coordinate from time\n    .assign_coords({'hour': lambda d: d['time'].dt.hour})\n    .groupby('hour').median()\n    # Compute the median for each hour group\n    .loc[{'hour': [5, 12]}]\n    # Select data for specific hours (5 AM and 12 PM)\n\n    .plot(\n        yscale='log',   # Set y-axis to logarithmic scale\n        xscale='log',   # Set x-axis to logarithmic scale\n        hue='hour',     # Differentiate data by hour using color\n        col='loc',\n        # Create separate plots for each location\n\n        size = 2\n    )\n);\n\nf:plt.Figure = plt.gcf()\n_s = 6;f.set_size_inches(_s,_s/3.2)\n\n\n\n\n\n\n\n\nFigure 6: Median Particle number size distribution timeseries over CHC and EAC color coded by hour."
  },
  {
    "objectID": "index.html#select-a-day",
    "href": "index.html#select-a-day",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Select a day",
    "text": "Select a day\nWe can also select a specific day Figure 7 or a time range Figure 8\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier\nDay = '2018-05-15'  # Specific day for filtering\n\n(\n    ds2\n    .loc[{'id': Id}]  # Select data based on the given ID\n    .loc[{'loc': Loc}]  # Filter data for the specified location\n    .loc[{'time': Day}]  # Select data for the specified day\n    [Var]  # Extract the variable of interest\n    .plot(\n        x='time',  # Set x-axis as time\n        y='Dp',  # Set y-axis as particle diameter\n        norm=mpl.colors.LogNorm(vmin=1e2, vmax=1e6),\n        # Apply logarithmic normalization for color scale\n        cmap='viridis',\n        # Use the 'viridis' colormap for better visibility\n        yscale='log',  # Set y-axis to logarithmic scale\n        size=2,  # Adjust panel height for better readability\n        aspect=3  # Set aspect ratio for better visualization\n    )\n);\n\n\n\n\n\n\n\n\nFigure 7: Particle number size distribution timeseries over CHC for 2018-05-15."
  },
  {
    "objectID": "index.html#select-a-time-range",
    "href": "index.html#select-a-time-range",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Select a time range",
    "text": "Select a time range\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier\nDate1 = '2018-05-15 00:00'  # Specific day for filtering\nDate2 = '2018-05-18 00:00'\n\n(\n    ds2\n    .loc[{'id': Id}]  # Select data based on the given ID\n    .loc[{'loc': Loc}]  # Filter data for the specified location\n    .loc[{'time': slice(Date1,Date2)}]\n        # Select data for the specified date range\n    [Var]  # Extract the variable of interest\n    .plot(\n        x='time',  # Set x-axis as time\n        y='Dp',  # Set y-axis as particle diameter\n        norm=mpl.colors.LogNorm(vmin=1e2, vmax=1e6),\n        # Apply logarithmic normalization for color scale\n        cmap='viridis',\n        # Use the 'viridis' colormap for better visibility\n        yscale='log',  # Set y-axis to logarithmic scale\n        size=2,  # Adjust marker size for better readability\n        aspect=3  # Set aspect ratio for better visualization\n    )\n);\n\n\n\n\n\n\n\n\nFigure 8: Particle number size distribution timeseries over CHC from 2018-05-15 to 2018-05-18 00:00."
  },
  {
    "objectID": "index.html#select-a-size-range",
    "href": "index.html#select-a-size-range",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Select a size range",
    "text": "Select a size range\nWe can also select a specific size range (Figure 9).\n\n\nCode\n# Define parameters for selection\nId = '10xnais_ion_neutral_smps'  # Data identifier for plotting\nVar = 'dndlDp'  # Variable of interest\nLoc = 'chc'  # Location identifier (currently not used)\nS1 = 100e-9\nS2 = 400e-9\n\n(\n    ds2\n    .loc[{'id': Id}]   # Select data based on the given ID\n    .loc[{'Dp': slice(S1,S2)}]  # Select a size range\n    [Var]               # Extract the variable of interest\n    .mean('time')     # Compute the mean over the time dimension\n    .rename(Var + ' [cm^-3]') # rename for ylable\n    .reset_coords(drop=True) # so that the title is not messy\n    .plot(              # Plot the data\n        yscale='log',   # Set y-axis to logarithmic scale\n        xscale='log',   # Set x-axis to logarithmic scale\n        hue='loc'       # Differentiate locations using color\n    )\n);\n\nax = plt.gca()\n#send legend to the size\nax.get_legend().set_bbox_to_anchor([1,1])\n\nax.set_xlim(1e-7,1e-6)\nf:plt.Figure = plt.gcf()\n_s = 3;f.set_size_inches(_s,_s/2)\n\n\n\n\n\n\n\n\nFigure 9: Median over time in the size range from 100 to 400nm."
  },
  {
    "objectID": "index.html#plotting-distributions",
    "href": "index.html#plotting-distributions",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Plotting distributions",
    "text": "Plotting distributions\n\n\nCode\nds1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 881kB\nDimensions:      (loc: 2, time: 1776)\nCoordinates:\n  * loc          (loc) &lt;U4 32B 'alto' 'chc'\n  * time         (time) datetime64[ns] 14kB 2018-03-19 ... 2018-05-31T23:00:00\n    hr           (time) int64 14kB ...\nData variables: (10/30)\n    Ammonium     (loc, time) float64 28kB ...\n    Nitrate      (loc, time) float64 28kB ...\n    Organics     (loc, time) float64 28kB ...\n    Sulfate      (loc, time) float64 28kB ...\n    eBC          (loc, time) float64 28kB ...\n    ...           ...\n    N_13_40      (loc, time) float64 28kB ...\n    N_40_100     (loc, time) float64 28kB ...\n    N_4_440      (loc, time) float64 28kB ...\n    N_4_7        (loc, time) float64 28kB ...\n    N_7_13       (loc, time) float64 28kB ...xarray.DatasetDimensions:loc: 2time: 1776Coordinates: (3)loc(loc)&lt;U4'alto' 'chc'instrument :Dimensionunits :long_name :locationarray(['alto', 'chc'], dtype='&lt;U4')time(time)datetime64[ns]2018-03-19 ... 2018-05-31T23:00:00description :local time (UTC-4)array(['2018-03-19T00:00:00.000000000', '2018-03-19T01:00:00.000000000',\n       '2018-03-19T02:00:00.000000000', ..., '2018-05-31T21:00:00.000000000',\n       '2018-05-31T22:00:00.000000000', '2018-05-31T23:00:00.000000000'],\n      dtype='datetime64[ns]')hr(time)int64...instrument :Dimensionunits :long_name :hour[1776 values with dtype=int64]Data variables: (30)Ammonium(loc, time)float64...instrument :ACSMunits :ug m^-3long_name :Ammonium[3552 values with dtype=float64]Nitrate(loc, time)float64...instrument :ACSMunits :ug m^-3long_name :Nitrate[3552 values with dtype=float64]Organics(loc, time)float64...instrument :ACSMunits :ug m^-3long_name :Organics[3552 values with dtype=float64]Sulfate(loc, time)float64...instrument :ACSMunits :ug m^-3long_name :Sulfate[3552 values with dtype=float64]eBC(loc, time)float64...instrument :Mapunits :ug m^-3long_name :equivalent black carbon[3552 values with dtype=float64]J47(loc, time)float64...instrument :Calculated Valueunits :cm^-3 s^-1long_name :formation rate from 4 to 7 nm[3552 values with dtype=float64]PT_k(loc, time)float64...instrument :Calculated Valueunits :Klong_name :potential temperature[3552 values with dtype=float64]WMR(loc, time)float64...instrument :Calculated Valueunits :g kg^-1long_name :water vapor mixing ratio[3552 values with dtype=float64]CHO_CI(loc, time)float64...instrument :Chemical Ionization Mass Spectrometreunits :molec. cm^-3long_name :CHO Organic Mass Concentration[3552 values with dtype=float64]CHON_CI(loc, time)float64...instrument :Chemical Ionization Mass Spectrometreunits :molec. cm^-3long_name :CHON Organic Mass Concentration[3552 values with dtype=float64]ORG_CI(loc, time)float64...instrument :Chemical Ionization Mass Spectrometreunits :molec. cm^-3long_name :total organics[3552 values with dtype=float64]SA_CI(loc, time)float64...instrument :Chemical Ionization Mass Spectrometreunits :molec. cm^-3long_name :sulfuric acid[3552 values with dtype=float64]P(loc, time)float64...instrument :Meteorologyunits :mbarlong_name :pressure[3552 values with dtype=float64]RAD(loc, time)float64...instrument :Meteorologyunits :W m^-2long_name :incident radiation[3552 values with dtype=float64]RH(loc, time)float64...instrument :Meteorologyunits :%long_name :relative humidity[3552 values with dtype=float64]T(loc, time)float64...instrument :Meteorologyunits :Klong_name :temperature[3552 values with dtype=float64]WD_x(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :x - wind speed[3552 values with dtype=float64]WD_x_summit(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :x - wind speeda at summit[3552 values with dtype=float64]WD_y(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :y - wind speed[3552 values with dtype=float64]WD_y_summit(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :y - wind speed at summit[3552 values with dtype=float64]WS(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :wind speed[3552 values with dtype=float64]WS_summit(loc, time)float64...instrument :Meteorologyunits :m s^-1long_name :x wind speed at summit[3552 values with dtype=float64]PBLH(loc, time)float64...instrument :Modelunits :mlong_name :planetary boundary layer height[3552 values with dtype=float64]CF(loc, time)float64...instrument :Satelliteunits :%long_name :cloud fraction[3552 values with dtype=float64]N_100_440(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 100-440nm[3552 values with dtype=float64]N_13_40(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 13-40nm[3552 values with dtype=float64]N_40_100(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 40-100nm[3552 values with dtype=float64]N_4_440(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 4-440nm[3552 values with dtype=float64]N_4_7(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 4-7nm[3552 values with dtype=float64]N_7_13(loc, time)float64...instrument :SMPS + NAISunits :particles cm^-3long_name :part. conc. 7-13nm[3552 values with dtype=float64]Indexes: (2)locPandasIndexPandasIndex(Index(['alto', 'chc'], dtype='object', name='loc'))timePandasIndexPandasIndex(DatetimeIndex(['2018-03-19 00:00:00', '2018-03-19 01:00:00',\n               '2018-03-19 02:00:00', '2018-03-19 03:00:00',\n               '2018-03-19 04:00:00', '2018-03-19 05:00:00',\n               '2018-03-19 06:00:00', '2018-03-19 07:00:00',\n               '2018-03-19 08:00:00', '2018-03-19 09:00:00',\n               ...\n               '2018-05-31 14:00:00', '2018-05-31 15:00:00',\n               '2018-05-31 16:00:00', '2018-05-31 17:00:00',\n               '2018-05-31 18:00:00', '2018-05-31 19:00:00',\n               '2018-05-31 20:00:00', '2018-05-31 21:00:00',\n               '2018-05-31 22:00:00', '2018-05-31 23:00:00'],\n              dtype='datetime64[ns]', name='time', length=1776, freq=None))Attributes: (0)\n\n\nSome variables follow a logarithmic distribution, such as eBC or total particle number concentrations. In such cases:\n\nUse the log of the value for plotting and calculations.\nAlternatively, use a logarithmic y-scale when plotting.\nFor aggregation, use the median rather than the mean.\n\nOne way to check this is by plotting their histograms or probability distribution functions. For example, below (Figure 10), I do this for eBC.\nIn the first histogram, most values are concentrated in the first bin, with very few spread across larger sizes, making it hard to interpret. However, if we take the logarithm and plot the histogram again (Figure 11), we often see a distribution that better resembles a Gaussian. This is a strong indicator that the variable follows a logarithmic distribution.\n\n\nCode\n(\n    ds1['eBC']  # Select the 'eBC' variable from the dataset\n    .loc[{'loc': 'chc'}]  # Filter data for location 'chc'\n    .to_series()  # Convert to Pandas Series for easier plotting\n    .plot.hist()  # Plot histogram of the raw eBC values\n)\n\n# Get current axis and set x-axis label\nax: plt.Axes = plt.gca()\nax.set_xlabel('eBC [µg m⁻³]');\n# Label the x-axis with proper units\n\nf:plt.Figure = plt.gcf()\n_s = 2;f.set_size_inches(_s,_s/1.6)\n\n\n\n\n\n\n\n\nFigure 10: Linear eBC hisogram.\n\n\n\n\n\n\n\nCode\n(\n    ds1['eBC']  # Select the 'eBC' variable from the dataset\n    .loc[{'loc': 'chc'}]  # Filter data for location 'chc'\n    .where(lambda d: d &gt; 0.005)\n    # Keep only values greater than 0.005\n    # (beacuse zero or below will give us minus infinity)\n    .pipe(np.log10)  # Apply log10 transformation\n    .to_series()  # Convert to Pandas Series for easier plotting\n    .plot.hist()  # Plot histogram of log-transformed values\n)\n\n# Get current axis and set x-axis label\nax: plt.Axes = plt.gca()\nax.set_xlabel('log10(eBC)');  # Label the x-axis with the transformed variable\nf:plt.Figure = plt.gcf()\n_s = 2;f.set_size_inches(_s,_s/1.6)\n\n\n\n\n\n\n\n\nFigure 11: Logaritmic eBC hisogram.\n\n\n\n\n\nThe logarithmic scale enhances comparability of eBC concentration across CHC and EAC, as illustrated in Figure 12. Additionally, it improves the visualization of diurnal patterns, especially when combined with the median and 0.25–0.75 quantiles, as shown in Figure 13.\n\n\nCode\n(\n    ds1['eBC']\n    .plot(\n        yscale='log',  # Set y-axis to logarithmic scale\n        ylim=(1e-2, None),\n        # Set lower limit for y-axis, upper limit auto-adjusts\n        hue='loc'  # Differentiate data by location\n    )\n);\nax = plt.gca()\nax.get_legend().set_bbox_to_anchor([1,1])\nax.set_ylabel('eBC [ug m^-3]')\n\nf:plt.Figure = plt.gcf()\n_s = 5;f.set_size_inches(_s,_s/4)\n\n\n\n\n\n\n\n\nFigure 12: Timeseries of eBC mass concentration.\n\n\n\n\n\n\n\nCode\nres = (\n    ds1['eBC']\n    .assign_coords({'hour': lambda d: d['time'].dt.hour})\n    # Extract and assign hour from time\n    .groupby('hour').quantile([.75,.5,.25])\n    # Compute 25th, 50th (median), and 75th percentiles per hour\n    .plot(\n        x='hour',  # Set x-axis to hour\n        yscale='log',  # Use logarithmic scale for y-axis\n        ylim=(1e-2, None),\n        # Set lower limit for y-axis, upper limit auto-adjusts\n        col='loc',  # Separate plots by location\n        hue='quantile',\n        # Differentiate quantiles with colors\n\n        size = 2\n    )\n)\n\n# Customize axis settings for each subplot\nfor ax in res.axs.flat:\n    ax: plt.Axes\n    ax.set_xticks([0, 6, 12, 18])  # Set specific x-axis ticks\n    ax.grid()  # Enable grid\n\nres.axs[0,0].set_ylabel('eBC [ug m^-3]'); # Set ylabel on left ax\n\n\n\n\n\n\n\n\nFigure 13: “Diurnal median eBC mass concentration with 0.25 and 0.75 quantiles. Notice the y-label in logscale”"
  },
  {
    "objectID": "index.html#link-to-references",
    "href": "index.html#link-to-references",
    "title": "Dataset Manipulation and Plotting Using Xarray - ACP25",
    "section": "Link to references",
    "text": "Link to references\nSome studies that have been published about CHC that can help you interpret your answers\n\nNew particle formation dynamics in the central Andes: contrasting urban and mountaintop environments (2025)\n\nAuthors: Aliaga, D., Sinclair, V. A., Krejci, R., Andrade, M., Artaxo, P., Blacutt, L., Cai, R., Carbone, S., Gramlich, Y., Heikkinen, L., Heslin-Rees, D., Huang, W., Kerminen, V.-M., Koenig, A. M., Kulmala, M., Laj, P., Mardoñez-Balderrama, V., Mohr, C., Moreno, I., Paasonen, P., Scholz, W., Sellegri, K., Ticona, L., Uzu, G., Velarde, F., Wiedensohler, A., Worsnop, D., Wu, C., Xuemeng, C., Zha, Q., and Bianchi, F.\nJournal: Aerosol Research, 3, 15–44\nDOI: 10.5194/ar-3-15-2025\n\nAtmospheric black carbon in the metropolitan area of La Paz and El Alto, Bolivia: concentration levels and emission sources (2024)\n\nAuthors: Mardoñez-Balderrama, V., Močnik, G., Pandolfi, M., Modini, R. L., Velarde, F., Renzi, L., Marinoni, A., Jaffrezo, J.-L., Moreno R., I., Aliaga, D., Bianchi, F., Mohr, C., Gysel-Beer, M., Ginot, P., Krejci, R., Wiedensohler, A., Uzu, G., Andrade, M., and Laj, P.\nJournal: Atmospheric Chemistry and Physics, 24, 12055–12077\nDOI: 10.5194/acp-24-12055-2024\n\nOxidized organic molecules in the tropical free troposphere over Amazonia (2023)\n\nAuthors: Zha, Q., Aliaga, D., Krejci, R., Sinclair, V. A., Wu, C., Ciarelli, G., Scholz, W., Heikkinen, L., Partoll, E., Gramlich, Y., Huang, W., Leiminger, M., Enroth, J., Peräkylä, O., Cai, R., Chen, X., Koenig, A. M., Velarde, F., Moreno, I., Petäjä, T., Artaxo, P., Laj, P., Hansel, A., Carbone, S., Kulmala, M., Andrade, M., Worsnop, D., Mohr, C., and Bianchi, F.\nJournal: National Science Review, nwad138\nDOI: 10.1093/nsr/nwad138\n\nThe SALTENA Experiment: Comprehensive Observations of Aerosol Sources, Formation, and Processes in the South American Andes (2022)\n\nAuthors: Bianchi, F., Sinclair, V. A., Aliaga, D., Zha, Q., Scholz, W., Wu, C., Heikkinen, L., Modini, R., Partoll, E., Velarde, F., Moreno, I., Gramlich, Y., Huang, W., Koenig, A. M., Leiminger, M., Enroth, J., Peräkylä, O., Marinoni, A., Xuemeng, C., Blacutt, L., Forno, R., Gutierrez, R., Ginot, P., Uzu, G., Facchini, M. C., Gilardoni, S., Gysel-Beer, M., Cai, R., Petäjä, T., Rinaldi, M., Saathoff, H., Sellegri, K., Worsnop, D., Artaxo, P., Hansel, A., Kulmala, M., Wiedensohler, A., Laj, P., Krejci, R., Carbone, S., Andrade, M., and Mohr, C.\nJournal: Bulletin of the American Meteorological Society, 103, E212–E229\nDOI: 10.1175/BAMS-D-20-0187.1\n\nSource apportionment study on particulate air pollution in two high-altitude Bolivian cities: La Paz and El Alto (2022)\n\nAuthors: Mardoñez, V., Pandolfi, M., Borlaza, L. J. S., Jaffrezo, J.-L., Alastuey, A., Besombes, J.-L., Moreno R., I., Perez, N., Močnik, G., Ginot, P., Krejci, R., Chrastny, V., Wiedensohler, A., Laj, P., Andrade, M., and Uzu, G.\nJournal: Atmospheric Chemistry and Physics Discussions, 1–41\nDOI: 10.5194/acp-2022-780\n\nIdentifying source regions of air masses sampled at the tropical high-altitude site of Chacaltaya using WRF-FLEXPART and cluster analysis (2021)\n\nAuthors: Aliaga, D., Sinclair, V. A., Andrade, M., Artaxo, P., Carbone, S., Kadantsev, E., Laj, P., Wiedensohler, A., Krejci, R., and Bianchi, F.\nJournal: Atmospheric Chemistry and Physics, 21, 16453–16477\nDOI: 10.5194/acp-21-16453-2021\n\nBlack carbon emission and transport mechanisms to the free troposphere at the La Paz/El Alto (Bolivia) metropolitan area based on the Day of Census (2012) (2018)\n\nAuthors: Wiedensohler, A., Andrade, M., Weinhold, K., Müller, T., Birmili, W., Velarde, F., Moreno, I., Forno, R., Sanchez, M. F., Laj, P., Ginot, P., Whiteman, D. N., Krejci, R., Sellegri, K., and Reichler, T.\nJournal: Atmospheric Environment, 194, 158–169\nDOI: 10.1016/j.atmosenv.2018.09.032\n\n\n\n\nCode"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]